/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT  0
#define NUM_MODS 1
#define BT_CTRL  2

/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp TAB>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <15 28>;
            bindings = <&kp LPAR>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <20 31>;
            bindings = <&kp RPAR>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&mt LBRC LBKT>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&mt RBRC RBKT>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <16 3>;
            bindings = <&mt UNDER MINUS>;
        };
        combo_at {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&kp AT>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <19 8>;
            bindings = <&mt PLUS EQUAL>;
        };
        combo_dollar {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp DLLR>;
        };
        combo_percent {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp PRCNT>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hl: homerow_layers {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <50>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        tabz: tab_z {
            compatible = "zmk,behavior-mod-morph";
            label = "TAB_Z";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp TAB>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };
        tabspace: tab_space {
            compatible = "zmk,behavior-mod-morph";
            label = "TAB_SPACE";
            #binding-cells = <0>;
            bindings = <&mt LSHIFT SPACE>, <&kp TAB>;
            mods = <(MOD_LALT | MOD_RALT | MOD_LCTL | MOD_RCTL)>;
        };
    };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
//                         | ALT | LWR | SPC | RSE  | ALT |

//                         bindings = <
//    &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
//    &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
//    &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt RSHFT RET
//                         &kp LALT  &mo 1 &kp SPACE &mo 2  &kp RALT
//                         >;
//                 };

            bindings = <
    &kp TAB    &kp Q     &kp W      &kp E     &kp R              &kp T             &kp Y     &kp U              &kp I        &kp O      &kp P           &mt TILDE GRAVE
    &kp ESC    &hm ESC A &hm LGUI S &kp D     &hl NUM_MODS F     &kp G             &kp H     &hl NUM_MODS J     &kp K        &kp L      &mt SQT DQT     &mt SEMI COLON
    &kp LSFT   &tabz     &kp X      &kp C     &kp V              &kp B             &kp N     &kp M              &mt LT COMMA &mt GT DOT &mt QMARK FSLH  &mt PIPE BSLH
                           &kp LCTRL &lt NUM_MODS BSPC  &tabspace  &lt BT_CTRL ENTER  &kp LALT
            >;
        };

        num_mods {
// ----------------------------------------------------------------------------------
// |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |    DEL    |
// |    |  _  |  +  |  {  |  }  | "|" |   | LFT | DWN |  UP | RGT |  `  |     ~     |
// |    | ESC | GUI | ALT | CAPS|  "  |   | HOME| END | PGUP| PGDN| PRSC| SHFT(RET) |
//                       |     |     | RET | ADJ |     |
            bindings = <
    &kp GRAVE &mt F1 N1 &mt F2 N2   &mt F3 N3    &mt F4 N4      &mt F5 N5     &mt F6 N6        &mt F7 N7      &mt F8 N8    &mt F9 N9    &mt F10 N0   &mt F12 F11
    &kp TAB   &kp EXCL  &kp AT      &kp HASH     &kp DLLR       &kp PRCNT     &kp CARET        &kp AMPS       &kp STAR     &kp LPAR     &kp RPAR     &kp PSCRN
    &kp LSHFT &none     &none       &none        &mt LBRC LBKT  &mt RBRC RBKT &mt UNDER MINUS  &mt PLUS EQUAL &kp PG_DN    &kp HOME     &kp END      &kp ENTER
                     &reset       &kp DEL        &trans       &mo BT_CTRL    &kp LEFT
            >;
        };

        bt_control {
            bindings = <
    &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans   &trans   &trans     &trans     &trans   &trans
    &trans     &trans       &trans       &trans       &trans       &trans       &kp LEFT &kp DOWN &kp UP     &kp RIGHT  &trans   &trans
    &trans     &trans       &trans       &trans       &trans       &trans       &trans   &trans   &trans     &trans     &trans   &trans
                          &bootloader         &trans   &trans   &bt BT_PRV &bt BT_NXT
            >;
        };
     };
};
